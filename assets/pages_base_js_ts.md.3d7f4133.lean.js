import{_ as l,c as p,b as o,d as s,e,a as n,o as t,r as c}from"./app.d81ae0a4.js";const d=JSON.parse('{"title":"Typescript","description":"","frontmatter":{},"headers":[{"level":2,"title":"ts 笔记","slug":"ts-笔记","link":"#ts-笔记","children":[]},{"level":2,"title":"1.搭建 ts 坏境","slug":"_1-搭建-ts-坏境","link":"#_1-搭建-ts-坏境","children":[]},{"level":2,"title":"2.基本类型","slug":"_2-基本类型","link":"#_2-基本类型","children":[{"level":3,"title":"2.1 number string boolean symbol unknow any never void","slug":"_2-1-number-string-boolean-symbol-unknow-any-never-void","link":"#_2-1-number-string-boolean-symbol-unknow-any-never-void","children":[]},{"level":3,"title":"symbol 类型","slug":"symbol-类型","link":"#symbol-类型","children":[]},{"level":3,"title":"Reflect proxy","slug":"reflect-proxy","link":"#reflect-proxy","children":[]},{"level":3,"title":"2.2 Object object {}区别","slug":"_2-2-object-object-区别","link":"#_2-2-object-object-区别","children":[]},{"level":3,"title":"2.3 interface 接口","slug":"_2-3-interface-接口","link":"#_2-3-interface-接口","children":[]},{"level":3,"title":"2.4 数组 2 种方式","slug":"_2-4-数组-2-种方式","link":"#_2-4-数组-2-种方式","children":[]},{"level":3,"title":"2.5 函数","slug":"_2-5-函数","link":"#_2-5-函数","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"2.6 类型断言 联合类型 交叉类型","slug":"_2-6-类型断言-联合类型-交叉类型","link":"#_2-6-类型断言-联合类型-交叉类型","children":[]},{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":3,"title":"交叉类型","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":3,"title":"类型断言","slug":"类型断言","link":"#类型断言","children":[]},{"level":3,"title":"2.7 内置对象","slug":"_2-7-内置对象","link":"#_2-7-内置对象","children":[]},{"level":3,"title":"2.8 类 class","slug":"_2-8-类-class","link":"#_2-8-类-class","children":[]},{"level":3,"title":"2.9 抽象类 abstract","slug":"_2-9-抽象类-abstract","link":"#_2-9-抽象类-abstract","children":[]},{"level":3,"title":"super 关键字","slug":"super-关键字","link":"#super-关键字","children":[]},{"level":3,"title":"链式调用","slug":"链式调用","link":"#链式调用","children":[]},{"level":3,"title":"2.10 元组 长度固定的数组 tuple","slug":"_2-10-元组-长度固定的数组-tuple","link":"#_2-10-元组-长度固定的数组-tuple","children":[]},{"level":3,"title":"2.11 枚举 enum","slug":"_2-11-枚举-enum","link":"#_2-11-枚举-enum","children":[]},{"level":3,"title":"2.12 类型别名 | 类型推论","slug":"_2-12-类型别名-类型推论","link":"#_2-12-类型别名-类型推论","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"泛型的一些应用","slug":"泛型的一些应用","link":"#泛型的一些应用","children":[]},{"level":3,"title":"tsconfig.js 解析","slug":"tsconfig-js-解析","link":"#tsconfig-js-解析","children":[]},{"level":3,"title":"namespace 命名空间","slug":"namespace-命名空间","link":"#namespace-命名空间","children":[]},{"level":3,"title":"三斜线指令 ///","slug":"三斜线指令","link":"#三斜线指令","children":[]},{"level":3,"title":"声明文件 declare","slug":"声明文件-declare","link":"#声明文件-declare","children":[]},{"level":3,"title":"混入 Mixin","slug":"混入-mixin","link":"#混入-mixin","children":[]},{"level":3,"title":"装饰器 Decorator","slug":"装饰器-decorator","link":"#装饰器-decorator","children":[]},{"level":3,"title":"Ts 编写发布订阅","slug":"ts-编写发布订阅","link":"#ts-编写发布订阅","children":[]},{"level":3,"title":"TS 进阶 协变 逆变 双向协变","slug":"ts-进阶-协变-逆变-双向协变","link":"#ts-进阶-协变-逆变-双向协变","children":[]},{"level":3,"title":"TS 进阶用法 Partial & Pick","slug":"ts-进阶用法-partial-pick","link":"#ts-进阶用法-partial-pick","children":[]},{"level":3,"title":"Infer","slug":"infer","link":"#infer","children":[]},{"level":3,"title":"工具类型 Utility Types","slug":"工具类型-utility-types","link":"#工具类型-utility-types","children":[]},{"level":3,"title":"接口 interface","slug":"接口-interface","link":"#接口-interface","children":[]},{"level":3,"title":"属性的封装","slug":"属性的封装","link":"#属性的封装","children":[]}]},{"level":2,"title":"4.面向对象","slug":"_4-面向对象","link":"#_4-面向对象","children":[]},{"level":2,"title":"高级类型一","slug":"高级类型一","link":"#高级类型一","children":[{"level":3,"title":"type 和 interface 的区别","slug":"type-和-interface-的区别","link":"#type-和-interface-的区别","children":[]}]}],"relativePath":"pages/base/js/ts.md","lastUpdated":1679747123000}'),r={name:"pages/base/js/ts.md"},y=n("",128),D=n("",64);function F(C,A,i,B,E,u){const a=c("reference");return t(),p("div",null,[y,o("p",null,[s("例如，把 /// "),e(a,{types:"node"}),s("引入到声明文件，表明这个文件使用了 @types/node/index.d.ts 里面声明的名字； 并且，这个包需要在编译阶段与声明文件一起被包含进来。")]),D])}const f=l(r,[["render",F]]);export{d as __pageData,f as default};
