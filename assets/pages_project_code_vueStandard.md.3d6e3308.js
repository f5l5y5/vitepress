import{_ as e,c as l,o as i,a as o}from"./app.fe826405.js";const _=JSON.parse('{"title":"pms 项目工程规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"组件化规范","slug":"组件化规范","link":"#组件化规范","children":[]},{"level":2,"title":"组件化的好处","slug":"组件化的好处","link":"#组件化的好处","children":[]},{"level":2,"title":"组件目录模板示例","slug":"组件目录模板示例","link":"#组件目录模板示例","children":[]},{"level":2,"title":"组件化规范说明:","slug":"组件化规范说明","link":"#组件化规范说明","children":[]},{"level":2,"title":"组件模块化拆分思路","slug":"组件模块化拆分思路","link":"#组件模块化拆分思路","children":[]}],"relativePath":"pages/project/code/vueStandard.md","lastUpdated":1685438566000}'),d={name:"pages/project/code/vueStandard.md"},a=o('<h1 id="pms-项目工程规范" tabindex="-1">pms 项目工程规范 <a class="header-anchor" href="#pms-项目工程规范" aria-hidden="true">#</a></h1><h2 id="组件化规范" tabindex="-1">组件化规范 <a class="header-anchor" href="#组件化规范" aria-hidden="true">#</a></h2><p>ps:参考自:<a href="https://juejin.cn/post/7133127716638818340" target="_blank" rel="noreferrer">https://juejin.cn/post/7133127716638818340</a></p><h2 id="组件化的好处" tabindex="-1">组件化的好处 <a class="header-anchor" href="#组件化的好处" aria-hidden="true">#</a></h2><ol><li>组件化是对实现的分层，是更有效的代码组合方式。</li><li>组件化是对资源的重组和优化，从而使项目资源管理更合理。&#39;</li><li>组件化利于重构。</li></ol><h2 id="组件目录模板示例" tabindex="-1">组件目录模板示例 <a class="header-anchor" href="#组件目录模板示例" aria-hidden="true">#</a></h2><ul><li>src <ul><li>components/ （全局组件） <ul><li>UploadImage/ <ul><li>utils/ (组件内部函数) <ul><li>oss.ts</li></ul></li><li>index.vue</li></ul></li><li>CommonForm/ <ul><li>components/ (CommonForm 组件内部子组件) <ul><li>BaseHeader.vue</li><li>BaseFooter.vue</li></ul></li><li>index.vue (CommonForm 组件入口)</li></ul></li></ul></li><li>views/ (页面文件夹) <ul><li>order/ <ul><li>orderList/ <ul><li>components/ (订单列表页面子组件) <ul><li>TableFilter.vue</li><li>TableList.vue</li></ul></li><li>index.vue</li></ul></li><li>orderLog/ <ul><li>index.vue (订单日志页面入口)</li></ul></li></ul></li><li>login/ <ul><li>index.vue</li></ul></li></ul></li></ul></li></ul><h2 id="组件化规范说明" tabindex="-1">组件化规范说明: <a class="header-anchor" href="#组件化规范说明" aria-hidden="true">#</a></h2><ol><li>具体组件文件和目录统一以<code>多单词全拼</code>的<code>PascalCase</code>方式命名,如:<code>BaseHeader.vue</code>,<code>BaseFooter.vue</code>; <code>index.vue</code>入口文件除外</li><li>组件引用统一以<code>PascalCase</code>自闭合标签引用,包含<code>slot</code>插槽除外</li><li>理论上组件或页面的<code>index.vue</code>入口文件不允许出现同级<code>vue</code>文件</li><li>src 下的顶层<code>components</code>文件夹下只允许存放全局公共组件,页面相关强耦合业务组件需放在对应页面下级 components 目录下</li><li><code>views</code>页面组件命名统一以<code>lowerCase</code>方式命名,页面组件下的子组件<code>components/</code>命名遵守<code>PascalCase</code></li></ol><h2 id="组件模块化拆分思路" tabindex="-1">组件模块化拆分思路 <a class="header-anchor" href="#组件模块化拆分思路" aria-hidden="true">#</a></h2><ol><li><code>index.vue</code>作为入口文件,以<code>简洁</code>为主,尽量不承载或少承载业务逻辑代码,主要承担组合各子组件的作用</li><li>子组件拆分尽量遵循<code>高内聚,低耦合</code>的原则. 高内聚:一个好的子组件应当恰好做一件事;低耦合:尽量减少与外部数据连接的点;</li><li>子组件拆分按页面复杂度分成几个大的基本模块,如: <code>头部,弹窗,列表,底部</code>等</li><li>代码不要重复: 标准就是你修改每一个功能时，只会修改一处，如果多余 1 处，那么这就是重复了</li><li>避免太多参数: 不要出现一个子组件功能不多,但是 props 过多</li><li>持续改进: 很少有人能把初稿写的完善，写代码也是如此，我们刚开始写的时候尽可以先为完成功能，然后逐步打磨，拆分函数，改善名称，消除重复。</li></ol>',11),c=[a];function r(t,n,s,u,h,p){return i(),l("div",null,c)}const v=e(d,[["render",r]]);export{_ as __pageData,v as default};
