import{_ as s,o as a,c as n,a as l}from"./app.388c05f4.js";const E=JSON.parse('{"title":"自动更新版本信息","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. 使用 husky 中的 pre-push","slug":"_1-使用-husky-中的-pre-push","link":"#_1-使用-husky-中的-pre-push","children":[]},{"level":2,"title":"2. 只更新推送特定分支版本","slug":"_2-只更新推送特定分支版本","link":"#_2-只更新推送特定分支版本","children":[]}],"relativePath":"pages/project/main/auto-update-version.md","lastUpdated":1722918563000}'),o={name:"pages/project/main/auto-update-version.md"},p=l(`<h1 id="自动更新版本信息" tabindex="-1">自动更新版本信息 <a class="header-anchor" href="#自动更新版本信息" aria-hidden="true">#</a></h1><h2 id="_1-使用-husky-中的-pre-push" tabindex="-1">1. 使用 husky 中的 pre-push <a class="header-anchor" href="#_1-使用-husky-中的-pre-push" aria-hidden="true">#</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">branch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> rev-parse --abbrev-ref HEAD</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">$branch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tag-test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">];</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#BABED8;">  latestTag</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> describe --tags --abbrev=0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">  version</span><span style="color:#89DDFF;">=\${</span><span style="color:#BABED8;">latestTag</span><span style="color:#89DDFF;">#</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#FFCB6B;">sed</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s|&quot;version&quot;: &quot;v[0-9.]*&quot;|&quot;version&quot;: &quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">$latestTag</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;|g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">./package.json</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#BABED8;">	 </span><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feat(package): updated package.json version to </span><span style="color:#BABED8;">$latestTag</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Updated package.json version to </span><span style="color:#BABED8;">$version</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>当推送分支时，脚本被触发并执行以下操作：</p><ol><li><p>获取当前所在的分支名：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">branch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> symbolic-ref --short HEAD</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">/</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">$(git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">rev-parse</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--abbrev-ref</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">HEAD</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre></div><p>这行代码使用<code>git symbolic-ref --short HEAD</code>命令获取当前所在的分支名，并将其存储在变量<code>branch</code>中。</p></li></ol><ul><li><p>git rev-parse --abbrev-ref HEAD：这个命令在任何情况下都会输出一些内容。如果当前处于一个分支，它会输出分支名；如果当前处于一个没有分支名的提交（比如通过 git checkout &lt;commit-hash&gt; 命令检出某个提交），或者在一个初始的、还没有任何提交的仓库中，它会输出 HEAD。</p></li><li><p>git symbolic-ref --short -q HEAD：这个命令只在当前处于一个分支时输出分支名。如果当前处于一个没有分支名的提交，或者在一个初始的、还没有任何提交的仓库中，它不会输出任何内容，而且会返回一个非零的退出状态码（可以通过 $? 变量查看）。</p></li></ul><ol start="2"><li><p>检查当前分支是否为 master 分支：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">$branch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">];</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span></code></pre></div><p>这个条件判断语句检查变量<code>branch</code>是否为&quot;master&quot;。如果是，则执行接下来的操作。</p></li><li><p>获取最新的 tag 版本号：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#BABED8;">latestTag</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> describe --tags --abbrev=0</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">version</span><span style="color:#89DDFF;">=\${</span><span style="color:#BABED8;">latestTag</span><span style="color:#89DDFF;">#</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>这两行代码使用<code>git tag --sort=-committerdate | head -n 1</code>命令获取所有 tag，并根据提交日期排序，然后取得最新的一个 tag，并将其存储在变量<code>latestTag</code>中。接着，<code>\${latestTag#v}</code>将从<code>latestTag</code>中删除前缀&quot;v&quot;，提取纯粹的版本号，并将其存储在变量<code>version</code>中。</p></li><li><p>更新 package.json 文件中的版本号：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">sed</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s|&quot;version&quot;: &quot;v[0-9.]*&quot;|&quot;version&quot;: &quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">$latestTag</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;|g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">./package.json</span></span>
<span class="line"></span></code></pre></div><p>这一行使用<code>sed</code>命令，根据正则表达式<code>&quot;version&quot;: &quot;[0-9.]*&quot;</code>，将 package.json 文件中的版本号替换为变量<code>version</code>中的值。</p></li><li><p>添加修改后的 package.json 文件到提交中：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">feat(package): updated package.json version to </span><span style="color:#BABED8;">$latestTag</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>这一行使用<code>git add</code>命令将修改后的 package.json 文件添加到暂存区中,进行提交。</p></li><li><p>打印更新后的版本号信息：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Updated package.json version to </span><span style="color:#BABED8;">$version</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><p>这行代码使用<code>echo</code>命令打印出更新后的版本号信息，以供用户查看。</p></li></ol><p>这个脚本的目的是在推送 master 分支时，根据最新的 tag 版本自动更新 package.json 文件中的版本号。请确保您在执行这个脚本之前已经安装了必要的依赖，并且正确设置了相关的 Git 钩子。</p><h2 id="_2-只更新推送特定分支版本" tabindex="-1">2. 只更新推送特定分支版本 <a class="header-anchor" href="#_2-只更新推送特定分支版本" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env sh</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取版本</span></span>
<span class="line"><span style="color:#BABED8;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">node</span><span style="color:#C3E88D;"> -p </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">require(&#39;./package.json&#39;).version</span><span style="color:#89DDFF;">&quot;)</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Version: </span><span style="color:#BABED8;">$version</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 获取分支</span></span>
<span class="line"><span style="color:#BABED8;">branch</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">git</span><span style="color:#C3E88D;"> rev-parse --abbrev-ref HEAD</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#BABED8;">branch_version</span><span style="color:#89DDFF;">=\${</span><span style="color:#BABED8;">branch</span><span style="color:#89DDFF;">##*/}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> $branch</span></span>
<span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> $branch_version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 是否是release或者hotfix分支</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">$branch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=~</span><span style="color:#BABED8;"> ^release.</span><span style="color:#89DDFF;">*|</span><span style="color:#BABED8;">^hotfix.</span><span style="color:#89DDFF;">*</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">]]</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 判断版本是否一致</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">[[</span><span style="color:#BABED8;"> $version </span><span style="color:#89DDFF;">!=</span><span style="color:#BABED8;"> $branch_version </span><span style="color:#89DDFF;">]];</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">then</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#FFCB6B;">sed</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">s|&quot;version&quot;: &quot;v[0-9.]*&quot;|&quot;version&quot;: &quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">$branch_version</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;|g</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">./package.json</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">add</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">package.json</span></span>
<span class="line"><span style="color:#BABED8;">	</span><span style="color:#FFCB6B;">git</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">update version to </span><span style="color:#BABED8;">$branch_version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">--no-verify</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">echo</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Branch starts with release or hotfix</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">latestTag</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">version</span><span style="color:#89DDFF;">}&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">fi</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre></div>`,10),e=[p];function t(c,r,D,y,i,F){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{E as __pageData,d as default};
